#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pyyaml",
# ]
# ///
from typing import Union, Callable
from yaml import load, dump
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper


TreeNode = Union[int, float, str, bool,
                 list['TreeNode'], dict[str, 'TreeNode']]


def depth_first(tree: TreeNode, callback: Callable[[TreeNode], TreeNode]) -> TreeNode:
    if isinstance(tree, list):
        return [depth_first(node, callback) for node in tree]
    elif isinstance(tree, dict):
        return {key: depth_first(node, callback) for key, node in tree.items()}
    else:
        return callback(tree)


def main() -> None:
    with open("./test.yml", "r+") as f:
        data: TreeNode = load(f, Loader=Loader)
        f.seek(0)
        f.truncate(0)

        def foo(t):
            print(t)
            return t
        data = depth_first(data, foo)
        dump(data, f, Dumper=Dumper, sort_keys=False)


if __name__ == "__main__":
    main()
