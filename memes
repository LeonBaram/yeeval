#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.11"
# dependencies = [
#     "pyyaml",
# ]
# ///
from typing import Union, Callable
from yaml import load, dump
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper


TreeNode = dict[str, Union[int, float, str,
                           bool, list['TreeNode'], 'TreeNode']]


def depth_first(tree: TreeNode, callback: Callable[[TreeNode], None]) -> None:
    """
    does a depth-first traversal of the input tree,
    applying the callback to each non-leaf node.

    "non-leaf" because callback() is intended to mutate (portions of) the tree,
    so callback() is passed a parent dict, instead of a node.
    """
    if isinstance(tree, list):
        for node in tree:
            depth_first(node, callback)
    elif isinstance(tree, dict):
        callback(tree)
        for key, node in tree.items():
            depth_first(node, callback)


def main() -> None:
    with open("./test.yml") as f:
        data: TreeNode = load(f, Loader=Loader)
        depth_first(data, lambda t: print(list(t.values())))


if __name__ == "__main__":
    main()
